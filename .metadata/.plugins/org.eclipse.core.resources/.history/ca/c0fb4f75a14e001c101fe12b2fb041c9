package com.hach.dataextraction.impl;

import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.json.JSONArray;
import org.json.JSONObject;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.hach.dataextraction.utils.common.Utilities;
import com.hach.dataextraction.utils.osvc.OSVCandKAWebServiceCaller;
import com.hach.dataextraction.vo.AttachmentDetails;
import com.hach.dataextraction.vo.AttachmentTypes;
import com.hach.dataextraction.vo.CategoryDetails;
import com.hach.dataextraction.vo.ContentDetails;

public class StartExtractionImpl {

	private Logger logger = Logger.getLogger(StartExtractionImpl.class);
	
	public static void main(String[] args) {
		// initialize loggers
		File f = new File(StartExtractionImpl.class.getProtectionDomain().getCodeSource().getLocation().getPath());
		PropertyConfigurator.configure(f.getParentFile().getAbsolutePath()+"/log.properties");
		f=  null;
		try
		{
//			StartExtractionImpl impl = new StartExtractionImpl();
			
			String xmlData="<COMMERCIAL_QA><QUESTION><![CDATA[New Product Naming Standard Work]]></QUESTION><SUMMARY><![CDATA[Provides a framework for cthe creation of names for new products]]></SUMMARY><ANSWER><![CDATA[<strong><span style=\"color:rgb(255, 0, 0)\">INTERNAL SALES OR COMMERCIALIZATION INFORMATION.&nbsp; DO NOT PROVIDE TO CUSTOMERS.</span></strong><br /> <br /> Helps new product development team to identify specific identity of the product or product fanily (alphanumeric name and product description) and intellectual property branding that guides industrial design and compliments the sales strategy.<br /> <br /> This document provides a template for naming and standard work.<br /> <br /> Product Brand is Hach]]></ANSWER><ATTACHMENTS><ATTACHMENT SIZE=\"47259\"><![CDATA[Product Naming Standard Work_ V3.4.xlsx]]></ATTACHMENT></ATTACHMENTS></COMMERCIAL_QA>";
			org.jsoup.nodes.Document doc = Jsoup.parse(xmlData);
			if(null!=doc)
			{
				Elements aTagsList = doc.getElementsByAttribute("a");
				if(null!=aTagsList && aTagsList.size()>0)
				{
					Element aEle = null;
					String hrefValue=null;
					for(int a=0;a<aTagsList.size();a++)
					{
						aEle = (Element)aTagsList.get(a);
						hrefValue= aEle.attr("href");
						if(null!=hrefValue && !"".equals(hrefValue) && !"#".equals(hrefValue))
						{
							hrefValue= hrefValue.replace("\\", "/");
						}
					}
				}
			}
			
		}
		catch(Exception e)
		{
			Utilities.printStackTraceToLogs(StartExtractionImpl.class.getName(), "main()", e);
		}
	}

	
	private void startExecution(String channelRefKey)
	{
		try
		{
			List<ContentDetails> documentsList = getAllDocIDs("TECHNICAL_QA");
			if(null!=documentsList && documentsList.size()>0)
			{
				ContentDetails contentDetails = null;
				
			}
			else
			{
				logger.info("startExecution :: No Documents Found. Exiting.");
			}
		}
		catch(Exception e)
		{
			Utilities.printStackTraceToLogs(StartExtractionImpl.class.getName(), "startExecution()", e);
		}
	}
	
	private List<ContentDetails> getAllDocIDs(String channelRefKey)
	{
		List<ContentDetails> documentsList = new ArrayList<ContentDetails>();
		try
		{
			boolean hasMore = true;
			int limit = 1000;
			int offset = 0;
			OSVCandKAWebServiceCaller caller = new OSVCandKAWebServiceCaller();
			JSONObject content = null;
			JSONArray items = null;
			JSONObject item = null;
			ContentDetails contentDetails = null;
			while (hasMore)
			{
				try
				{
					content = caller.callKAWebservice("/content?q=contentType.referenceKey eq '"+channelRefKey+"'&limit=" + limit + "&offset=" + offset);
					// increase offset value
					offset += limit;
					if(null!=content)
					{
						hasMore = content.getBoolean("hasMore");
						// check for items
						items = content.getJSONArray("items");
						if(null!=items && items.length()>0)
						{
							contentDetails = new ContentDetails();
							// iterate each item and get the content specific details for the channel
							for (int i = 0; i < items.length(); i++)
							{
								item = items.getJSONObject(i);
								try
								{
									// recordId
									contentDetails.setRecordId(item.getString("recordId"));
								}
								catch(Exception e) {}
								try
								{
									// versionId
									contentDetails.setVersionId(item.getString("versionId"));
								}
								catch(Exception e) {}
								try
								{
									// documentId
									contentDetails.setDocumentId(item.getString("documentId"));
								}
								catch(Exception e) {}
								try
								{
									// title
									contentDetails.setTitle(item.getString("title"));
								}
								catch(Exception e) {}
								try
								{
									// version
									contentDetails.setVersionNumber(item.getString("version"));
								}
								catch(Exception e) {}
								try
								{
									// answerId
									contentDetails.setAnswerId(item.get("answerId").toString());
								}
								catch(Exception e) {}
								try
								{
									// locale
									if(null!=item.getJSONObject("locale"))
									{
										contentDetails.setLocale(item.getJSONObject("locale").getString("recordId"));
									}
								}
								catch(Exception e) {}
								
								item = null;
								// if contentDetails recordId is not null = add to vector
								if(null!=contentDetails && null!=contentDetails.getRecordId() && !"".equals(contentDetails.getRecordId()))
								{
									/*
									 * CALL FUNCTION TO FETCH COMPLETE DOCUMENT DETAILS
									 */
									
									
									
									if(null==documentsList || documentsList.size()<=0)
									{
										documentsList = new ArrayList<ContentDetails>();
									}
									documentsList.add(contentDetails);
								}
								contentDetails = null;
							}
						}
						items=null;

						System.out.println(documentsList.size() + " items found so far.");
					}
					content=null;
				}
				catch (Exception e)
				{
					Utilities.printStackTraceToLogs(StartExtractionImpl.class.getName(), "getAllDocIDs()", e);
				}
			}
		}
		catch (Exception e)
		{
			Utilities.printStackTraceToLogs(StartExtractionImpl.class.getName(), "getAllDocIDs()", e);
		}
		if(null!=documentsList && documentsList.size()>0)
		{
			logger.info("getAllDocIDs :: Total Documents Found are :: >"+ documentsList.size()+". For Channel :: >"+ channelRefKey);
		}
		else
		{
			logger.info("getAllDocIDs :: No Documents Found for Channel :: >"+ channelRefKey);
		}
		return documentsList;
	}

	
	private ContentDetails getContentData(String recordId, OSVCandKAWebServiceCaller caller, ContentDetails contentDetails)
	{
		JSONObject contentObj = null;
		try
		{
			contentObj = caller.callKAWebservice("/content/"+recordId);
			if(null!=contentObj)
			{
				// set COMPLETE CONTENT OBJ IN CONTENT DETAILS
				contentDetails.setContentObject(contentObj);
				
				// CHEKC FOR RESOURCE PATH
				try
				{
					if(null!=contentObj.getString("resourcePath"))
					{
						contentDetails.setResourcePath(contentObj.getString("resourcePath"));
					}
				}catch(Exception e) {};
				
				// CHECK FOR CATEGORIES
				if(null!=contentObj.getJSONArray("categories") && contentObj.getJSONArray("categories").length()>0)
				{
					JSONObject catObj = null;
					CategoryDetails catDetail = null;
					for(int a=0;a<contentObj.getJSONArray("categories").length();a++)
					{
						try
						{
							catObj = contentObj.getJSONArray("categories").getJSONObject(a);
							if(null!=catObj)
							{
								catDetail =new CategoryDetails();
								try
								{
									// referenceKey
									catDetail.setRefKey(catObj.getString("referenceKey"));
								}catch(Exception e) {};
								
								try
								{
									// recordId
									catDetail.setRecordId(catObj.getString("recordId"));
								}catch(Exception e) {};
								
								try
								{
									// name
									catDetail.setName(catObj.getString("name"));
								}catch(Exception e) {};
								
								try
								{
									// externalType
									catDetail.setExternalType(catObj.getString("externalType"));
								}catch(Exception e) {};
								
								if(null!=catDetail.getRefKey() && !"".equals(catDetail.getRefKey()))
								{
									// add to categoryList
									if(null==contentDetails.getCategoryList() || contentDetails.getCategoryList().size()<=0)
									{
										contentDetails.setCategoryList(new ArrayList<CategoryDetails>());
									}
									contentDetails.getCategoryList().add(catDetail);
								}
								
								catDetail = null;
							}
							catObj = null;
						}catch(Exception e) {};
					}
				}
				
				// SET XML NODE
				try
				{
					contentDetails.setSchemaData(contentObj.getString("xml"));
				}catch(Exception e) {}
				
				
				// CHECK FOR ATTACHMENTS
				if(null!=contentDetails.getSchemaData() && !"".equals(contentDetails.getSchemaData()))
				{
					// GET INLINE IMAGES AS ATTACHMENTS DATA
					// GET INLINE PDFS / WORD / DOCUMENTS / VIDEOS
					try
					{
						AttachmentDetails aDetails = null;
						DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
						DocumentBuilder builder = factory.newDocumentBuilder();
						Document doc = builder.parse(new InputSource(new StringReader(contentDetails.getSchemaData())));
						if(null!=doc)
						{
							NodeList attachmentList = doc.getElementsByTagName("ATTACHMENTS");
							if(null!=attachmentList && attachmentList.getLength()>0)
							{
								Node attachmentNode = attachmentList.item(0);
								if(null!=attachmentNode)
								{
									NodeList childNodesList = attachmentNode.getChildNodes();
									if(null!=childNodesList && childNodesList.getLength()>0)
									{
										Node childNode=null;
										for(int b=0;b<childNodesList.getLength();b++)
										{
											childNode = (Node)childNodesList.item(b);
											if(childNode.getNodeName().equals("ATTACHMENT"))
											{
												// SET ATTACHMENT DATA FOR DOCUMENT
												aDetails = new AttachmentDetails();
												aDetails.setAttachmentName(Utilities.readNodeValue(childNode));
												if(null!=aDetails.getAttachmentName() && !"".equals(aDetails.getAttachmentName()))
												{
													// prepare Other details
													aDetails.setAttachmentType(AttachmentTypes.ATT_TYPE_DOCUMENT_ATTACHMENT);
													aDetails.setKaResourcePath(contentDetails.getResourcePath());
													if(null!=aDetails.getKaResourcePath() && !aDetails.getKaResourcePath().endsWith("/"))
													{
														aDetails.setKaResourcePath(aDetails.getKaResourcePath()+"/");
													}
													aDetails.setKaResourcePath(aDetails.getKaResourcePath()+aDetails.getAttachmentName());
													// add to contentDetails.AttachmentList
													if(null==contentDetails.getAttachmentsList() || contentDetails.getAttachmentsList().size()<=0)
													{
														contentDetails.setAttachmentsList(new ArrayList<AttachmentDetails>());
													}
													contentDetails.getAttachmentsList().add(aDetails);
												}
												aDetails = null;
											}
											childNode = null;
										}
									}
									childNodesList = null;
								}
								attachmentNode = null;
							}
							attachmentList = null;
						}
						builder = null;
						factory =null;
						doc=null;
					}
					catch(Exception e)
					{
						Utilities.printStackTraceToLogs(StartExtractionImpl.class.getName(), "getContentData()", e);
					}
					
					// PROCEED FOR INLINE IMAGES AND INLINE LINKS
				}
			}
			contentObj = null;
		}
		catch(Exception e)
		{
			Utilities.printStackTraceToLogs(StartExtractionImpl.class.getName(), "getContentData()", e);
		}
		return contentDetails;
	}
	
	
}
