package com.softclouds.miteldataloader.dataStructures.models.userinfo;

import java.util.ArrayList;
import java.util.Vector;

import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.softclouds.miteldataloader.dataStructures.cruder.DataType;
import com.softclouds.miteldataloader.main.OSVCandKAWebServiceCaller;
import com.softclouds.miteldataloader.utility.Utilities;

/**
 * This class models the data that we input into OSvC for a user info record in the custom OSvC
 * table.
 * 
 * 
 * From "Table Designs.xlsx" (recommendation sheet) made by Grace Kim
 * 
 * acct_id Text KA console user ID. Called ka_console_user_id in reports.
 * 
 * ID Integer Unique record id.
 * 
 * last_name Text Last name of staff member.
 * 
 * first_name Text First name of staff member.
 * 
 * full_name Text Full name of staff member.
 * 
 * CreatedTime DateTime Date/Time when the record was created in this table. This value is
 * auto-generated by the system when the record is created.
 * 
 * reporting_group Text Group values from OSvC Staff Account.
 * 
 */

public class UserInfoRecord
{
	private static Logger logger = Logger.getLogger(UserInfoRecord.class);

	/**
	 * This scans through a
	 * 
	 * @param content
	 * @param caller
	 * @return
	 * @throws JSONException
	 */
	public static Vector<TransactionDetails> extractFromContent(JSONObject content,OSVCandKAWebServiceCaller caller) throws JSONException
	{
		Vector<TransactionDetails> ret = null;
		try
		{
			if(null!=content)
			{
				ret = new Vector<TransactionDetails>();
				/*
				 * FETCH ITEMS FROM THE JSON OBJECT
				 */
				JSONArray items = content.getJSONArray("items");
				int len = items.length();
				logger.info("extractFromContent :: Total Users Found are :: > " + len);
				if(null!=items && items.length()>0)
				{
					for (int i = 0; i < len; i++)
					{
						JSONObject item = items.getJSONObject(i);
						if(null!=item.get("id"))
						{
							String lookupName="";
							try
							{
								if(null!=item.get("lookupName"))
								{
									lookupName = String.valueOf(item.get("lookupName"));
								}
							}
							catch(Exception e)
							{}

							TransactionDetails transDetails = new TransactionDetails();
							String accountId =String.valueOf(item.get("id"));
							/*
							 * NOW CALL WS TO FETCH USER SPECIFIC DETAILS
							 */
							JSONObject userInfoJSON =null;
							try
							{
								userInfoJSON = caller.callOSvCWebservice("/accounts/" + accountId + "/");
							}
							catch(Exception e)
							{
								Utilities.printStackTraceToLogs(UserInfoRecord.class.getName(), "extractFromContent()", e);
								// No need of tracking error details - as it is already happening 
							}

							if(null!=userInfoJSON)
							{
								UserDetails userDetails = new UserDetails();
								// extract loginId
								try
								{
									if(null!=userInfoJSON.get("login"))
									{
										userDetails.setLoginId(String.valueOf(userInfoJSON.get("login")));
									}
								}
								catch(Exception e)
								{
									Utilities.printStackTraceToLogs(UserInfoRecord.class.getName(), "extractFromContent()", e);
								}

								// extract first & last name from name object
								JSONObject nameJSONObject = null;
								try
								{
									nameJSONObject = userInfoJSON.getJSONObject("name");
								}
								catch(Exception e)
								{
									Utilities.printStackTraceToLogs(UserInfoRecord.class.getName(), "extractFromContent()", e);
								}

								String firstName="";
								String lastName="";
								if(null!=nameJSONObject)
								{
									if(null!=nameJSONObject.get("last"))
									{
										lastName =String.valueOf(nameJSONObject.get("last"));
										userDetails.setLastName(lastName);
									}
									if(null!=nameJSONObject.get("first"))
									{
										firstName =String.valueOf(nameJSONObject.get("first"));
										userDetails.setFirstName(firstName);
									}
									String fullName="";
									if(null!=firstName && !"".equals(firstName))
									{
										fullName=firstName;
									}
									if(null!=lastName && !"".equals(lastName))
									{
										if(null!=fullName && !"".equals(fullName))
										{
											fullName = fullName+" "+lastName;
										}
										else
										{
											fullName = lastName;
										}
									}
									if(null!=fullName && !"".equals(fullName))
									{
										userDetails.setFullName(fullName.trim());
									}
									
									fullName=  null;
								}
								firstName = null;
								lastName=  null;
								nameJSONObject = null;

								// EXTRACT STAFFGROUP INFORMATION
								JSONObject staffGroupJSONObject = null;
								try
								{
									staffGroupJSONObject = userInfoJSON.getJSONObject("staffGroup");
								}
								catch(Exception e)
								{
									Utilities.printStackTraceToLogs(UserInfoRecord.class.getName(), "extractFromContent()", e);
								}

								if(null!=staffGroupJSONObject)
								{
									if(null!=staffGroupJSONObject.get("lookupName"))
									{
										userDetails.setReportingGroup(String.valueOf(staffGroupJSONObject.get("lookupName")));
									}
								}
								staffGroupJSONObject = null;

								// EXTRACT EMAIL JSON OBJECT
								JSONObject emailJSONObject = null;
								try
								{
									emailJSONObject =userInfoJSON.getJSONObject("emails");
								}
								catch(Exception e)
								{
									Utilities.printStackTraceToLogs(UserInfoRecord.class.getName(), "extractFromContent()", e);
								}
								if(null!=emailJSONObject)
								{
									// CHECK FOR THE HREF LINKS IF GREATER THAN 0, THE CALL WS TO GET THE EMAIL ADDRESS
									JSONArray linksArray = null;
									try
									{
										linksArray = emailJSONObject.getJSONArray("links");
									}
									catch(Exception e)
									{
										Utilities.printStackTraceToLogs(UserInfoRecord.class.getName(), "extractFromContent()", e);
									}
									if(null!=linksArray && linksArray.length()>0)
									{
										String emailUrl="/accounts/"+accountId+"/emails/0";
										JSONObject emailDetailsObj = null;
										try
										{
											emailDetailsObj = caller.callOSvCWebservice(emailUrl);
										}
										catch(Exception e)
										{
											Utilities.printStackTraceToLogs(UserInfoRecord.class.getName(), "extractFromContent()", e);
										}
										if(null!=emailDetailsObj)
										{
											if(null!=emailDetailsObj.get("address"))
											{
												userDetails.setEmailId(String.valueOf(emailDetailsObj.get("address")));
											}
										}
										emailDetailsObj = null;
										emailUrl= null;
									}
									linksArray = null;
								}
								emailJSONObject = null;

								/*
								 * check for EMPTY FIELDS AND SET ERROR CODES
								 */
								if(null==userDetails.getLoginId() || "".equals(userDetails.getLoginId()))
								{
									// TRACK ERROR DETAILS - SET HAS ERROR FLAG TO TRUE AND ADD ERROR
									transDetails.setHasError(true);
									ErrorDetails errorDetails = new ErrorDetails();
									errorDetails.setErrorCode("");
									errorDetails.setErrorMessage("FAILED TO IDENTIFY ACCOUNT ID OF THE USER.");
									if(null==transDetails.getErrorList() || transDetails.getErrorList().size()<=0)
									{
										transDetails.setErrorList(new ArrayList<ErrorDetails>());
									}
									transDetails.getErrorList().add(errorDetails);		
									errorDetails=null;
								}

								if(null==userDetails.getEmailId() || "".equals(userDetails.getEmailId()))
								{
									// TRACK ERROR DETAILS - SET HAS ERROR FLAG TO TRUE AND ADD ERROR
									transDetails.setHasError(true);
									ErrorDetails errorDetails = new ErrorDetails();
									errorDetails.setErrorCode("");
									errorDetails.setErrorMessage("FAILED TO IDENTIFY EMAIL ADDRESS OF THE USER.");
									if(null==transDetails.getErrorList() || transDetails.getErrorList().size()<=0)
									{
										transDetails.setErrorList(new ArrayList<ErrorDetails>());
									}
									transDetails.getErrorList().add(errorDetails);		
									errorDetails=null;
								}

								if(null==userDetails.getFullName() || "".equals(userDetails.getFullName()))
								{
									// TRACK ERROR DETAILS - SET HAS ERROR FLAG TO TRUE AND ADD ERROR
									transDetails.setHasError(true);
									ErrorDetails errorDetails = new ErrorDetails();
									errorDetails.setErrorCode("");
									errorDetails.setErrorMessage("FAILED TO IDENTIFY FULL NAME OF THE USER.");
									if(null==transDetails.getErrorList() || transDetails.getErrorList().size()<=0)
									{
										transDetails.setErrorList(new ArrayList<ErrorDetails>());
									}
									transDetails.getErrorList().add(errorDetails);		
									errorDetails=null;
								}

								if(null==userDetails.getReportingGroup() || "".equals(userDetails.getReportingGroup()))
								{
									// TRACK ERROR DETAILS - SET HAS ERROR FLAG TO TRUE AND ADD ERROR
									transDetails.setHasError(true);
									ErrorDetails errorDetails = new ErrorDetails();
									errorDetails.setErrorCode("");
									errorDetails.setErrorMessage("FAILED TO IDENTIFY REPORTING GROUP OF THE USER.");
									if(null==transDetails.getErrorList() || transDetails.getErrorList().size()<=0)
									{
										transDetails.setErrorList(new ArrayList<ErrorDetails>());
									}
									transDetails.getErrorList().add(errorDetails);		
									errorDetails=null;
								}

								// add userDetails to transactionDetails
								transDetails.setUserDetails(new UserDetails());
								transDetails.setUserDetails(userDetails);
								userDetails = null;
							}
							else
							{
								ErrorDetails errorDetails = new ErrorDetails();
								errorDetails.setErrorCode("");
								if(null!=lookupName && !"".equals(lookupName))
								{
									errorDetails.setErrorMessage("FAILED TO FETCH USER INFO FOR {"+lookupName+"}.");
								}
								else
								{
									errorDetails.setErrorMessage("FAILED TO FETCH USER INFO FOR {"+accountId+"}.");
								}

								if(null==transDetails.getErrorList() || transDetails.getErrorList().size()<=0)
								{
									transDetails.setErrorList(new ArrayList<ErrorDetails>());
								}
								transDetails.getErrorList().add(errorDetails);	
							}

							ret.add(transDetails);
							userInfoJSON = null;
							transDetails=  null;
							accountId=  null;
						}
						item =null;
					}
				}
				else
				{
					logger.info(":: No User Account Details Found from UserAccounts JSON.");
				}
				items = null;
			}
			else
			{
				logger.info("extractFromContent :: JSON Object is Null. Returning Null.");
			}
		}
		catch(Exception e)
		{
			Utilities.printStackTraceToLogs(UserInfoRecord.class.getName(), "extractFromContent()", e);
		}
		return ret;
	}

	/**
	 * Gets a payload used for a create() call to Syed's webservice for custom table OSvC uploading.
	 * 
	 * @return
	 */
	public String getCreatePayload(UserDetails userDetails)
	{
		String payload = "";

		payload +=
				"  <s:Body xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n";
		payload += "    <Create xmlns=\"urn:messages.ws.rightnow.com/v1_3\">\n";
		payload +=
				"      <RNObjects xmlns:q1=\"urn:generic.ws.rightnow.com/v1_3\" xsi:type=\"q1:GenericObject\">\n";
		payload += "        <q1:ObjectType>\n";
		payload += "          <q1:Namespace>KMS</q1:Namespace>\n";
		payload += "          <q1:TypeName>user_info</q1:TypeName>\n";
		payload += "        </q1:ObjectType>\n";

		// ADD LoginId
		if(null!=userDetails.getLoginId() && !"".equals(userDetails.getLoginId()))
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "acct_id",
					userDetails.getLoginId());
		}
		else
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "acct_id",
					"NULL");
		}

		// ADD EmailAddress
		if(null!=userDetails.getEmailId() && !"".equals(userDetails.getEmailId()))
		{
			payload +=
					DataType.getPayloadSnippet(DataType.TEXT_VALUE, "email_address", userDetails.getEmailId());
		}
		else
		{
			payload +=
					DataType.getPayloadSnippet(DataType.TEXT_VALUE, "email_address", "NULL");
		}

		// ADD FullName
		if(null!=userDetails.getFullName() && !"".equals(userDetails.getFullName()))
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "full_name", userDetails.getFullName());
		}
		else
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "full_name", "NULL");
		}

		// ADD ReportingGroup
		if (null!=userDetails.getReportingGroup() && !"".equals(userDetails.getReportingGroup()))
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "reporting_group_text",userDetails.getReportingGroup());
		}
		else
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "reporting_group_text","NULL");
		}


		payload += "      </RNObjects>\n";
		payload += "      <ProcessingOptions>\n";
		payload += "        <SuppressExternalEvents>false</SuppressExternalEvents>\n";
		payload += "        <SuppressRules>false</SuppressRules>\n";
		payload += "      </ProcessingOptions>\n";
		payload += "    </Create>\n";
		payload += "  </s:Body>\n";

		return payload;
	}

	public String getUserPayload(String loginId)
	{
		String payload = "";
		String query="SELECT ID, full_name FROM KMS.user_info WHERE acct_id='"+loginId+"';";

		//		payload+="<soapenv:Body>";
		//		payload+="<ns7:QueryObjects xmlns:ns7=\"urn:messages.ws.rightnow.com/v1_3\">";
		//		payload+="<ns7:Query>"+query+"</ns7:Query>";
		//		payload+="<ns7:ObjectTemplates xmlns:ns4=\"urn:objects.ws.rightnow.com/v1_3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"ns4:Contact\">";
		//		payload+="<ns4:Notes />";
		//		payload+="</ns7:ObjectTemplates>";
		//		payload+="<ns7:PageSize>10000</ns7:PageSize>";
		//		payload+="</ns7:QueryObjects>";
		//		payload+="</soapenv:Body>";

		payload+="<soapenv:Body>\n";
		payload+="<ns7:QueryCSV xmlns:ns7=\"urn:messages.ws.rightnow.com/v1_3\">\n";
		payload+="    <ns7:Query>"+query+"</ns7:Query>\n";            
		payload+="    <ns7:PageSize>10000</ns7:PageSize>\n";
		payload+=" </ns7:QueryCSV>\n";
		payload+=" </soapenv:Body>\n";

		query=  null;
		return payload;
	}

	public String getUpdatePayLoad(UserDetails userDetails)
	{
		String payload = "";

		payload +=
				"  <s:Body xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n";
		payload += "    <Update xmlns=\"urn:messages.ws.rightnow.com/v1_3\">\n";
		payload +=
				"      <RNObjects xmlns:q1=\"urn:generic.ws.rightnow.com/v1_3\" xsi:type=\"q1:GenericObject\">\n";
		payload += "<ID xmlns=\"urn:base.ws.rightnow.com/v1_3\" id=\""+userDetails.getAutoId()+"\" />";
		payload += "        <q1:ObjectType>\n";
		payload += "          <q1:Namespace>KMS</q1:Namespace>\n";
		payload += "          <q1:TypeName>user_info</q1:TypeName>\n";
		payload += "        </q1:ObjectType>\n";
		
		// ADD accountId
		if(null!=userDetails.getLoginId() && !"".equals(userDetails.getLoginId()))
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "acct_id",
					userDetails.getLoginId());
		}
		else
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "acct_id",
					"NULL");
		}

		// ADD EmailAddress
		if(null!=userDetails.getEmailId() && !"".equals(userDetails.getEmailId()))
		{
			payload +=
					DataType.getPayloadSnippet(DataType.TEXT_VALUE, "email_address", userDetails.getEmailId());
		}
		else
		{
			payload +=
					DataType.getPayloadSnippet(DataType.TEXT_VALUE, "email_address", "NULL");
		}

		// ADD FullName
		if(null!=userDetails.getFullName() && !"".equals(userDetails.getFullName()))
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "full_name", userDetails.getFullName());
		}
		else
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "full_name", "NULL");
		}

		// ADD ReportingGroup
		if (null!=userDetails.getReportingGroup() && !"".equals(userDetails.getReportingGroup()))
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "reporting_group_text",userDetails.getReportingGroup());
		}
		else
		{
			payload += DataType.getPayloadSnippet(DataType.TEXT_VALUE, "reporting_group_text","NULL");
		}

		payload += "      </RNObjects>\n";
		payload += "      <ProcessingOptions>\n";
		payload += "        <SuppressExternalEvents>false</SuppressExternalEvents>\n";
		payload += "        <SuppressRules>false</SuppressRules>\n";
		payload += "      </ProcessingOptions>\n";
		payload += "    </Update>\n";
		payload += "  </s:Body>\n";

		return payload;
	}
}